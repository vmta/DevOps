1
00:00:00,0 --> 00:00:04,252
Encrypted MOFs. So

2
00:00:04,252 --> 00:00:12,252
we got a lot of feedback on previous versions that it was difficult to use certificates to encrypt the MOFs

3
00:00:12,252 --> 00:00:13,252
that you were sending

4
00:00:13,252 --> 00:00:24,252
to the target node. So one of our goals here was to make it easier to make sure that your MOFs on the target

5
00:00:24,252 --> 00:00:33,252
node were encrypted and secure. But the total purpose here is to make sure they're encrypted in transit and

6
00:00:33,252 --> 00:00:36,252
at rest on the target node.

7
00:00:36,252 --> 00:00:42,252
So we have a couple of use cases securing the MOF in-transit. We have a documentation on that.

8
00:00:42,252 --> 00:00:50,252
There's a link in the notes in some of our documentation on our documentation site.

9
00:00:50,252 --> 00:01:01,252
So what's new here is there's a new requirement for document encryption EKU and the provider for the certificate

10
00:01:01,252 --> 00:01:12,252
must be Microsoft RSA SChannel Cryptographic Provider. That's a very important note

11
00:01:12,252 --> 00:01:20,252
because if how many people were using WMF4? How many people moved to WMF5?

12
00:01:20,252 --> 00:01:28,252
How many people got broken? There you go, so yeah. So it's a good thing to know if you're moving from WMF4

13
00:01:28,252 --> 00:01:35,252
because we did make a breaking change and that's how you fix it by creating the right kind of certificate.

14
00:01:35,252 --> 00:01:42,252
So the big feature here is that we automatically encrypt the entire MOF while it rests on the node once it

15
00:01:42,252 --> 00:01:52,252
gets there in WMF5. So is there a big advantage in that type of certificate?

16
00:01:52,252 --> 00:02:01,252
Let me answer that. Previously it was possible to generate types of certificates that had tack vectors on them,

17
00:02:01,252 --> 00:02:08,252
but if you had a certificate without the proper type of EKU, you could use them in ways that would reveal

18
00:02:08,252 --> 00:02:14,252
their private, not their private, their public key. This type of certificate, if you generate it correctly

19
00:02:14,252 --> 00:02:23,252
and via the best practice, the public key shouldn't be given away and you shouldn't have the problem of the

20
00:02:23,252 --> 00:02:29,252
potential attack against such certain cert. So this was done to increase the security of the encryption.

21
00:02:29,252 --> 00:02:36,252
Yeah, I see that. (Audience comment) So

22
00:02:36,252 --> 00:02:43,252
how does it work? LCM automatically encrypts the entire MOF using the Data Protection API on the target node.

23
00:02:43,252 --> 00:02:49,252
This means non-administrators cannot decrypt the MOF. That's no matter

24
00:02:49,252 --> 00:02:54,252
how you generated the MOF. The MOF

25
00:02:54,252 --> 00:03:02,252
generated by PowerShell is not encrypted by default. So it's still recommended that if you're using

26
00:03:02,252 --> 00:03:08,252
credentials to encrypt the MOF to protect it in transit so that your password

27
00:03:08,252 --> 00:03:18,252
is not lying around in the MOF that you sent, that you have lying around before you sent it to the node.

28
00:03:18,252 --> 00:03:24,252
So before we go to the demo, do we have any questions?

29
00:03:24,252 --> 00:03:51,252
Not where we have the demo. (Typing) So first I'll show you the code if it will come up underneath.

30
00:03:51,252 --> 00:03:58,252
So one of the things to point out here as well. We did this work so that we'll encrypt the MOF in place.

31
00:03:58,252 --> 00:04:00,252
It doesn't prevent you from the using the old

32
00:04:00,252 --> 00:04:07,252
methodology of encrypting the password, so when you use a certificate to encrypt the passwords,

33
00:04:07,252 --> 00:04:12,252
that still works, so you can do that and then we'll encrypt the MOF on top of it, so if you really need that

34
00:04:12,252 --> 00:04:17,252
extra security of I want my passwords hidden throughout the whole pipeline, you can still do that and that

35
00:04:17,252 --> 00:04:23,252
works with this. So. I guess that was my question. Is it necessary then if you're encrypting the MOF?

36
00:04:23,252 --> 00:04:30,252
I mean I guess it really just… So we've gotten feedback from customers that there is other things other than

37
00:04:30,252 --> 00:04:39,252
the credentials that they want to secure like the location of some of the files they're copying from,

38
00:04:39,252 --> 00:04:46,252
so they may want to encrypt the entire thing. Instead of may, we just encrypt the entire thing for you all the time.

39
00:04:46,252 --> 00:04:52,252
I know it was the other way, right? If I'm encrypting my MOF, then do I say what you do for my password?

40
00:04:52,252 --> 00:04:59,252
You'll see in the demo, but the encryption only happens when the LCM receives it and then writes it to disk,

41
00:04:59,252 --> 00:05:03,252
but there is other parts of the process where it's not encrypted.

42
00:05:03,252 --> 00:05:11,252
So the MOF created on a pull server itself you're using would remain in under _____?

43
00:05:11,252 --> 00:05:16,252
Is that correct? That's correct. And even you encrypt the password, it only encrypts the passwords.

44
00:05:16,252 --> 00:05:25,252
Anything else in your MOF generated by PowerShell is not encrypted so like Path SMB shares are not encrypted.

45
00:05:25,252 --> 00:05:33,252
And in Azure automation DSC if you're using that, it is encrypted on the service by itself, so when you

46
00:05:33,252 --> 00:05:40,252
generate the MOF, they encrypt it, and then save it to disk. And when it's on disk, it's encrypted and then they

47
00:05:40,252 --> 00:05:44,252
decrypt it, send it to the target node, and then it gets re-encrypted over there.

48
00:05:44,252 --> 00:05:50,252
That's exactly what I was going to ask. Does that mean you no longer need to set the plaintext

49
00:05:50,252 --> 00:05:54,252
password true variable under 5 or is that still needed in order to…

50
00:05:54,252 --> 00:06:02,252
That is still needed. We are doing some work with Azure automation to make it so you don't have to do it there

51
00:06:02,252 --> 00:06:08,252
because they do encrypt it at rest. So I have a very simple configuration.

52
00:06:08,252 --> 00:06:09,252
I have a

53
00:06:09,252 --> 00:06:17,252
MetaConfiguration here that sets the thumbprint. I have the thumbprint already in a global variable.

54
00:06:17,252 --> 00:06:31,252
Then I have my configuration and I use XPSDesiredState and DesiredState, so I'm importing them.

55
00:06:31,252 --> 00:06:41,252
Then I create a user and I create a script where I'm not running as that user and I'm going to verbose output

56
00:06:41,252 --> 00:06:49,252
the name of that user and then I'm going to run as the user that was just created and output the name of the

57
00:06:49,252 --> 00:06:55,252
user and I have a function here to generate the configuration data, pass in the thumbprints that we're encrypted

58
00:06:55,252 --> 00:07:03,252
with the same thumbprint. I have a comment here that there's an alternative way to encrypt using a certificate file.

59
00:07:03,252 --> 00:07:14,252
I'm not going to use that or demo it, but that's true, and I'm also telling DSC that I AllowDomainUsers.

60
00:07:14,252 --> 00:07:19,252
This is the local user, but it's still, we'll deal with that later.

61
00:07:19,252 --> 00:07:27,252
So I'll go ahead and import that module. I'm going to run the MetaConfig, apply the MetaConfig,

62
00:07:27,252 --> 00:07:29,252
This tells DSC

63
00:07:29,252 --> 00:07:35,252
to use the certificate to decrypt any MOFs edit users.

64
00:07:35,252 --> 00:07:41,252
Now let's go look at the MetaConfig, and if you see here, I'm going to have to find it.

65
00:07:41,252 --> 00:07:47,252
Give me a second here. Where is the… Here CertificateID. We have the CertificateID.

66
00:07:47,252 --> 00:07:56,252
We have everything else should be defaults. So we'll move on, unless there's any questions.

67
00:07:56,252 --> 00:08:11,252
The now I'm going to prompt for that password for that user we're creating.

68
00:08:11,252 --> 00:08:17,252
I don't know why I'm being so strict. The password doesn't matter.

69
00:08:17,252 --> 00:08:25,252
So if you notice here, we're using a new type of encryption called CMS.

70
00:08:25,252 --> 00:08:35,252
There are cmdlets for it and I'm using the password twice, so it's in here twice.

71
00:08:35,252 --> 00:08:43,252
But as I said, everything else is unencrypted. All the code to get the user is unencrypted.

72
00:08:43,252 --> 00:08:49,252
So we've already had questions about that, so just showing you that.

73
00:08:49,252 --> 00:09:03,252
And then I'll run the configuration. And so we created the user, we ran not as the user, so DSC runs as

74
00:09:03,252 --> 00:09:11,252
local system by default, and then we ran as a test user. I'm going to go and get the user,

75
00:09:11,252 --> 00:09:18,252
get the configuration. I also, so this basically just shows the same thing.

76
00:09:18,252 --> 00:09:25,252
When we do get, we're running as the same users. I'm going to delete the user just so that the user's not

77
00:09:25,252 --> 00:09:41,252
on the system. Now we can go look at the MOF. We don't see anything because it's all encrypted and that's that demo.

78
00:09:41,252 --> 00:09:50,252
Any questions? Are you saying you could have just made the file by hitting your hand and on the keyboard?

79
00:09:50,252 --> 00:59:59,999
Now where's the fun in that? Then the challenge to you would be to decrypt it after.


1
00:00:00,0 --> 00:00:04,424
So another demo. So let's talk about the---hum? (Audience comment)

2
00:00:04,424 --> 00:00:07,424
Yeah, so the class, dynamic keyword.

3
00:00:07,424 --> 00:00:15,424
So let me jump over to the second one. So the dynamic keyword class is a public class and it's controlled by

4
00:00:15,424 --> 00:00:20,424
a bunch of static members, so I'm just going to run these one at a time.

5
00:00:20,424 --> 00:00:26,424
So it's available in PowerShell v4 and later. In PowerShell's version 4, you're not going to see all of these

6
00:00:26,424 --> 00:00:30,424
because there's a couple new ones that are added. I'll get to that in a second.

7
00:00:30,424 --> 00:00:39,424
But you can get the members, you can use Get-Member-Static to see what's available on it and then let me just jump back.

8
00:00:39,424 --> 00:00:45,424
So by default, in PowerShell there are no keywords. If you want to see what keywords are available in the

9
00:00:45,424 --> 00:00:51,424
system, you just run Get-Keyword, but by default there are none. If you ran that from inside of DSC,

10
00:00:51,424 --> 00:00:57,424
you would see stuff because it uses keywords, but otherwise, you don't see any and the configuration keyword

11
00:00:57,424 --> 00:01:03,424
is technology not a dynamic one so that the entry point doesn't show up.

12
00:01:03,424 --> 00:01:10,424
Now so all the management of keywords is done using these static methods and these are the ones that are available

13
00:01:10,424 --> 00:01:17,424
in version 4, so AddKeyword to define a new keyword, and by the way, dynamic keyword has a constructor that

14
00:01:17,424 --> 00:01:20,424
takes no parameters and then you just set a bunch of properties on it.

15
00:01:20,424 --> 00:01:25,424
(Audience comment) Yeah, yeah, so you can just do hash table creation, yeah, so that's really easy.

16
00:01:25,424 --> 00:01:32,424
So there's AddKeyword, there's ContainsKeyword to see what keywords are currently on the system, Get to either

17
00:01:32,424 --> 00:01:36,424
look up all of them with no parameters or a string to get, excuse me, a specific keyword, and then of course,

18
00:01:36,424 --> 00:01:42,424
removing them by name. Now I didn't add this to my slides or to my script, but I should add it.

19
00:01:42,424 --> 00:02:02,424
I'm just going to create a new one, so k. I'll do it without the hash table just so you can see the properties.

20
00:02:02,424 --> 00:02:10,424
So there's a keyword, and so on keywords, it's got a whole bunch of different properties that are dealing with

21
00:02:10,424 --> 00:02:15,424
how do you or Get-Metadata and how do you define that and make languages and what not, so I mean there's a

22
00:02:15,424 --> 00:02:20,424
meta statement, there's parameters for the keyword, there's some parsing stuff in there, and to be honest,

23
00:02:20,424 --> 00:02:23,424
because this stuff is not documented, I certainly haven't figured it all out.

24
00:02:23,424 --> 00:02:29,424
All of my work has been through spelunking and trial and error and this is kind of like a hidden goodie in

25
00:02:29,424 --> 00:02:37,424
PowerShell that it's public, but it's really a work in progress. I'm talking to some team members on the

26
00:02:37,424 --> 00:02:44,424
PowerShell team about ideas I have around how this could be done and I know that the way I am doing it right

27
00:02:44,424 --> 00:02:49,424
now is probably not the way that they recommend doing it, but it's based on what I figured out and got working,

28
00:02:49,424 --> 00:02:53,424
so you can kind of look in through this and figure out how it works.

29
00:02:53,424 --> 00:02:56,424
I'm not going to go through and explain these things because I probably would explain them wrong because of

30
00:02:56,424 --> 00:02:59,424
the fact that it's not documented and is based on when I figured them out.

31
00:02:59,424 --> 00:03:04,424
I can have conversations about that outside of this session pertaining to the code that I've written,

32
00:03:04,424 --> 00:03:09,424
which is public and on GitHub and I can show you and you can take a look at it, but I don't want to go into

33
00:03:09,424 --> 00:03:14,424
the specifics of those today because I think that's a bit of a black hole.

34
00:03:14,424 --> 00:03:20,424
So those are the ones that are used for management, and then of course, you could also clear the keyword list

35
00:03:20,424 --> 00:03:25,424
at any time just by calling reset and the new ones that were added in version 5 that I just kind of discovered

36
00:03:25,424 --> 00:03:30,424
the other day, are Push and Pop. And so one of the things I discovered when I was tinkering around with this

37
00:03:30,424 --> 00:03:37,424
in PowerShell v4 that was an interesting challenge is that internally there is a single dynamic keyword table

38
00:03:37,424 --> 00:03:43,424
that uses just a set of strings to identify the keywords. And so if you have multiple languages that have the

39
00:03:43,424 --> 00:03:48,424
same keyword in different context, that's not going to work because you have one internal table.

40
00:03:48,424 --> 00:03:53,424
So that was one of the challenges that I had to work around, so I created my own table and I'm constantly

41
00:03:53,424 --> 00:03:58,424
shifting keywords in and out of the table that is currently being used by the language in the work that I'm doing.

42
00:03:58,424 --> 00:04:02,424
So if you look through my code and you see some of that stuff, that's what that's there for.

43
00:04:02,424 --> 00:04:07,424
Since then, version 5, and I'll makeshift my work to version 5 because I've just tried to move forward with

44
00:04:07,424 --> 00:04:12,424
where this stuff is going. Typically, I'm the kind of guy who likes to do down level support as much as I can,

45
00:04:12,424 --> 00:04:18,424
but this is so half-baked that I'm eager to move it forward leverage what they do with it going forward.

46
00:04:18,424 --> 00:04:24,424
But push and pop, which I haven't tinkered around with yet, I can only guess and actually I looked at the code

47
00:04:24,424 --> 00:04:31,424
using Reflector, that what they do is one takes the current set of keywords and pushes it down a level so that

48
00:04:31,424 --> 00:04:35,424
you can start with a brand new set, which is important when you're going through different layers of script blocks

49
00:04:35,424 --> 00:04:36,424
inside of a language and

50
00:04:36,424 --> 00:04:44,424
then pop as you come back up those layers. For those who aren't developers, can you talk about like .NET

51
00:04:44,424 --> 00:04:50,424
Reflector and IoSpy. Sure. They're really easy to use and you don't need to be a developer to understand

52
00:04:50,424 --> 00:04:53,424
either to use them or to understand the output. Yeah, so it's a great point.

53
00:04:53,424 --> 00:04:58,424
So I mean, everything these days or so many things these days are going open source.

54
00:04:58,424 --> 00:05:02,424
You see all the news about different parts of different modules in PowerShell going source and different

55
00:05:02,424 --> 00:05:06,424
parts in .NET going open source and Xamarin announcements, and all this goodness, they're publishing the

56
00:05:06,424 --> 00:05:11,424
source codes, so you can just go and read it. But what about when you don't have that source code?

57
00:05:11,424 --> 00:05:17,424
So PowerShell itself is not open source. You can use tools like IoSpy or Reflector, Reflector is a

58
00:05:17,424 --> 00:05:26,424
commercial tool, IoSpy is not, and you can load DLLs inside of those tools and it's going, then that tool will

59
00:05:26,424 --> 00:05:33,424
internally inspect the contents of those DLLs, show you the classes, give it to you in a searchable UI,

60
00:05:33,424 --> 00:05:38,424
and you can browse through and just really dig through and figure stuff out and that's a huge learning tool or

61
00:05:38,424 --> 00:05:43,424
it's great for troubleshooting bugs, great for just figuring out maybe some undocumented features because

62
00:05:43,424 --> 00:05:48,424
documentation certainly is not always up-to-date with what commands can actually do, and so those are good tools.

63
00:05:48,424 --> 00:05:54,424
Thanks June for that comment. Those are good tools to use and I use Reflector every other day, if not every

64
00:05:54,424 --> 00:06:02,424
day just going in and digging around and figuring stuff out. And power comes from understanding those things.

65
00:06:02,424 --> 00:06:10,424
Now so that's a high level look at what dynamic keyword has to offer in terms of interface and there's a lot of

66
00:06:10,424 --> 00:06:14,424
functionality that I'm still working on, like I mentioned, but I'm happy to work on with people if people

67
00:06:14,424 --> 00:59:59,999
want to work on that with me.


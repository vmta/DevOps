1
00:00:00,0 --> 00:00:06,056
Okay, so let me jump into a demo. So we got through kind of the core slides, but how many people have

2
00:00:06,056 --> 00:00:12,056
actually seen the automation service? Good. We see two or three, so I'm going to jump in just spend five

3
00:00:12,056 --> 00:00:18,056
minutes, try to level set everybody what it's about and then hopefully as we go forward, you'll kind of get an

4
00:00:18,056 --> 00:00:22,056
idea of why we built it out and how you can start taking advantage of it yourself.

5
00:00:22,056 --> 00:00:28,056
So if you go into the portal up in Azure, there's actually called automation accounts over here, so you can

6
00:00:28,056 --> 00:00:35,056
go and create a brand new automation account. I think we showed that on Monday with Joe, so I just created

7
00:00:35,056 --> 00:00:40,056
one and I might jump into some of the capabilities around that, but when you first create an automation

8
00:00:40,056 --> 00:00:45,056
account, here's what you're going to see. So you'll see this basically the home page and this is kind of the

9
00:00:45,056 --> 00:00:49,056
overview of what's going on inside the service and it has a set of things.

10
00:00:49,056 --> 00:00:57,056
So what we call Runbooks are basically PowerShell scripts, PowerShell workflows, or graphical runbooks,

11
00:00:57,056 --> 00:01:02,056
so we kind of have three types of language we support today. We may add more in the future, but all of those

12
00:01:02,056 --> 00:01:06,056
are runbooks to us because they basically allow you to deliver a process.

13
00:01:06,056 --> 00:01:11,056
From our assets perspective, I'll jump in here because it's kind of a set underneath here and this is really

14
00:01:11,056 --> 00:01:17,056
where we try to solve a lot of the problems that PowerShell has today and some of them are the first thing is

15
00:01:17,056 --> 00:01:21,056
we allow scheduling. So you don't have to kind of set up your own scheduler using task scheduler or something

16
00:01:21,056 --> 00:01:25,056
else and manage that, we do all of that in the cloud. So if you have things you want to run on schedule,

17
00:01:25,056 --> 00:01:31,056
it's available from the service. The other thing is all of your modules, so as some of you know, when you're trying

18
00:01:31,056 --> 00:01:36,056
like to automate and do PowerShell, you kind of have to make sure the modules are the right system when

19
00:01:36,056 --> 00:01:39,056
they're actually going to get deployed and actually execute.

20
00:01:39,056 --> 00:01:43,056
And so what we do with our modules is you can centralize them all into our service and then we can distribute

21
00:01:43,056 --> 00:01:48,056
those out to wherever you need them. They can run from in our service, but you'll see that we're starting to

22
00:01:48,056 --> 00:01:54,056
bring it so that you saw with the DSC probably on Monday we download all the modules needed for that configuration

23
00:01:54,056 --> 00:01:57,056
so that you can actually run it. And so you don't have to worry about the distribution of all of your

24
00:01:57,056 --> 00:02:01,056
modules going forward because you can centrally manage them here.

25
00:02:01,056 --> 00:02:05,056
From a certificate thing, it all really depends on what you do in certificates, but a lot of times,

26
00:02:05,056 --> 00:02:09,056
certificates themselves to get deployed and managed, and so we allow you to do that.

27
00:02:09,056 --> 00:02:14,056
it might be something as simple as setting up like a certificate auth between servers or it might be deploying

28
00:02:14,056 --> 00:02:22,056
your certificate to actually use for authentication and security over in IS, so it really depends without all

29
00:02:22,056 --> 00:02:24,056
of that inside of our service as well.

30
00:02:24,056 --> 00:02:28,056
The connections I'll talk a little bit about later, but these are really an object that allows you to kind of

31
00:02:28,056 --> 00:02:34,056
separate what system you're talking to into a connection object so that you can reuse that inside your

32
00:02:34,056 --> 00:02:37,056
PowerShell going forward and you don't have to hardcode that into the system.

33
00:02:37,056 --> 00:02:44,056
Obviously, variables are kind of the catch all, so again, all of this is trying to allow you to say I don't

34
00:02:44,056 --> 00:02:46,056
have to put stuff into the scripts.

35
00:02:46,056 --> 00:02:51,056
I can put stuff into a central location service and then I can reuse those across all of my PowerShell

36
00:02:51,056 --> 00:02:55,056
as I go forward and it's kind of the goal of like we've seen it for years and most of you probably do it,

37
00:02:55,056 --> 00:03:00,056
but don't hardcode anything into the PowerShell because then it doesn't really become reusable, and so if we

38
00:03:00,056 --> 00:03:06,056
can allow you to pull all of that domain knowledge into a central store and then you just use it at runtime,

39
00:03:06,056 --> 00:03:10,056
it really allows you to have a powerful, flexible, and shareable PowerShell scripts.

40
00:03:10,056 --> 00:03:13,056
The most obvious one at that is like your credentials. You probably use credentials to connect to a bunch of

41
00:03:13,056 --> 00:03:17,056
different systems, but when the password changes, you don't want to figure out do I have to go back to the

42
00:03:17,056 --> 00:03:21,056
scripts or some other place. You can just set it once here and then all of the PowerShell you've written

43
00:03:21,056 --> 00:03:24,056
just inherits that as it goes forward.

44
00:03:24,056 --> 00:03:28,056
And then, I mentioned variables and here's our credential stores.

45
00:03:28,056 --> 00:03:34,056
So I won't go into DSC configuration because I think you guys saw this on Monday, but obviously we have

46
00:03:34,056 --> 00:03:39,056
full management of all configurations inside our service, so you can upload your configurations,

47
00:03:39,056 --> 00:03:46,056
you can compile them into the MOFs, you can deploy them out to any server either in Azure, on-premises in AWS,

48
00:03:46,056 --> 00:03:52,056
and it's a pull services, so they get all their configuration and all the reporting comes back to our service.

49
00:03:52,056 --> 00:03:58,056
Jobs, again is how do you troubleshoot? One of the challenges when you run scripts on-premises today is how

50
00:03:58,056 --> 00:04:02,056
do you know what happened if something goes wrong? Where is all your logs being stored, are you writing them

51
00:04:02,056 --> 00:04:06,056
to some share, are you trying to put them in some folder? We'll centralize every single action that's taken

52
00:04:06,056 --> 00:04:09,056
from the automation into our jobs. So if

53
00:04:09,056 --> 00:04:14,056
you need to go back and troubleshoot, you get the full log of what happened, but you also get which PowerShell

54
00:04:14,056 --> 00:04:18,056
script was used at the time, so you can actually say well it's only changed my PowerShell script and that's

55
00:04:18,056 --> 00:04:22,056
why it's failing or is it because the script just started to fail now and move the error?

56
00:04:22,056 --> 00:04:26,056
All of that is centrally managed inside the service, so you never have to worry about that going forward.

57
00:04:26,056 --> 00:04:32,056
These are the nodes in management, again, I think you saw most of these on Monday, and here's the node

58
00:04:32,056 --> 00:04:37,056
configurations that were actually available. Question, yes.

59
00:04:37,056 --> 00:04:46,056
Hey if I'm doing DSC pull server on here and it's contacting my nodes local on-premise, am I going to be

60
00:04:46,056 --> 00:04:47,056
able to tell from here what's going on?

61
00:04:47,056 --> 00:04:51,056
Yeah, so there's full reporting. I won't, so you can, like one of theseâ€¦

62
00:04:51,056 --> 00:04:53,056
(Audience comment)

63
00:04:53,056 --> 00:04:58,056
Yeah, you'll know exactly what's going on from inside of the OS, all of the reporting shows up here.

64
00:04:58,056 --> 00:05:02,056
So because the pull service you'll see that, you know, I'll just jump in here to one that's compliant

65
00:05:02,056 --> 00:05:07,056
because this one's running, but you'll see I have a configuration that basically installs the Windows feature,

66
00:05:07,056 --> 00:05:13,056
sets up a website, probably some stuff from Azure storage, I do some file work, I get some stuff from remote

67
00:05:13,056 --> 00:05:17,056
file, and I install the package, standard stuff you'd see in DSC.

68
00:05:17,056 --> 00:05:22,056
But now, all of this is reporting back, so if one of these things fail like you couldn't set the website up

69
00:05:22,056 --> 00:05:25,056
correctly, I can drill in and you'll see exactly what's going on.

70
00:05:25,056 --> 00:05:29,056
So you can see here I took action against the default website, as well as I created a new website inside of

71
00:05:29,056 --> 00:05:30,056
my configuration, so

72
00:05:30,056 --> 00:05:35,056
you can basically do troubleshooting all the way from the top level down to the actual resource that might be

73
00:05:35,056 --> 00:05:38,056
failing inside DSC.

74
00:05:38,056 --> 00:05:44,056
So yeah, that's not, that's one of the major advantages you'll get to it's kind of the central management of everything.

75
00:05:44,056 --> 00:05:48,056
Okay and I'll jump out of here because I know we have other stuff to show, but the last thing to show here

76
00:05:48,056 --> 00:05:53,056
and obviously you get the overview of your jobs, plus we have source control integration directly to GitHub

77
00:05:53,056 --> 00:05:58,056
if you're starting to go down that path. You can just pull all of your scripts directly from there and it

78
00:05:58,056 --> 00:59:59,999
allows for kind of that source control. Okay.


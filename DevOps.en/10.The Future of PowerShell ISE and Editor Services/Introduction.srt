1
00:00:12,12 --> 00:00:17,17
Alright. So good morning everyone. It's great to see you all here today.

2
00:00:17,17 --> 00:00:21,21
I don't actually have anything planned to talk about today, so I figured we could all just go over to

3
00:00:21,21 --> 00:00:29,29
Kirk Munro's session instead. Just kidding. So anyway, I'm excited to be here at the summit to spend some

4
00:00:29,29 --> 00:00:35,35
time talking to all of you about the cool things that are going on to the whelm of PowerShell operating tools.

5
00:00:35,35 --> 00:00:40,40
For those of you who don't know me, I'm David Wilson, and I'm a member of the PowerShell team, and I'm really

6
00:00:40,40 --> 00:00:45,45
fortunate to get to work on cool projects like the PowerShell ISE, PowerShell for Visual Studio code,

7
00:00:45,45 --> 00:00:50,50
and PowerShell Editor Services. And in my time working on the projects, I've been able to talk with many

8
00:00:50,50 --> 00:00:55,55
members of the PowerShell community, so it's really awesome that I get to meet many of you in person this week.

9
00:00:55,55 --> 00:01:00,60
If you see me around the summit in the next few days, please feel free to come by and chat.

10
00:01:00,60 --> 00:01:03,63
So my talk today is titled

11
00:01:03,63 --> 00:01:08,68
The Future of PowerShell ISE and Editor Services. So my goal with this talk is to

12
00:01:08,68 --> 00:01:13,73
show how the future of PowerShell ISE will be defined by the integration of PowerShell Editor Services and

13
00:01:13,73 --> 00:01:18,78
how this will improve the larger of PowerShell authoring ecosystem.

14
00:01:18,78 --> 00:01:19,79
So let's start with an

15
00:01:19,79 --> 00:01:26,86
overview of the current landscape of PowerShell editors just to show how our work fits into the bigger picture.

16
00:01:26,86 --> 00:01:31,91
So for many years, PowerShell, I'm sorry, Microsoft has been focused on a single editor for PowerShell,

17
00:01:31,91 --> 00:01:33,93
the PowerShell ISE.

18
00:01:33,93 --> 00:01:36,96
The ISE is considered the standard PowerShell editor for many people

19
00:01:36,96 --> 00:01:41,101
since it comes in box Windows and typically supports all the latest and greatest PowerShell features

20
00:01:41,101 --> 00:01:45,105
as they appear. It's simple and understated, but it gets the job down.

21
00:01:45,105 --> 00:01:50,110
Its add-on model has allowed for some nice extensions and customizations and integrations with other

22
00:01:50,110 --> 00:01:56,116
Microsoft services like Azure agnation and PowerShell gallery. It's also been extended far past its original

23
00:01:56,116 --> 00:02:00,120
feature set by the ISE Steroids add-on, which a lot of people seem to like.

24
00:02:00,120 --> 00:02:06,126
Tobias Weltner has done a great job of turning the ISE into a much more powerful editor than what it was before

25
00:02:06,126 --> 00:02:13,133
for those who needed it. So even though the PowerShell ISE has been serving people well for many years,

26
00:02:13,133 --> 00:02:19,139
a new opportunity appeared last year that we wanted to sort of investigate and that is

27
00:02:19,139 --> 00:02:24,144
Visual Studio code. So Microsoft announced Visual Studio code during build 2015

28
00:02:24,144 --> 00:02:29,149
and spent a lot of time last year polishing it and improving it to something that's really useful.

29
00:02:29,149 --> 00:02:34,154
Its biggest benefit over Visual Studio is that it manages to provide the same level of functionality or

30
00:02:34,154 --> 00:02:40,160
close to the same level of functionality without all the extra bloat that Visual Studio has.

31
00:02:40,160 --> 00:02:44,164
So around the middle of last year, we were alerted to the development of a new extension model that would

32
00:02:44,164 --> 00:02:49,169
allow developers to plug in new language implementations and functionality like IntelliSense,

33
00:02:49,169 --> 00:02:56,176
code navigations, linting, and debugging support and we decided that it would be cool to investigate to see

34
00:02:56,176 --> 00:03:00,180
what it would take to actually plug in PowerShell to Visual Studio code.

35
00:03:00,180 --> 00:03:04,184
It turns out it wasn't that hard to provide a pretty decent level of PowerShell support.

36
00:03:04,184 --> 00:03:08,188
So in November of last year, we released the PowerShell extension for Visual Studio code during the

37
00:03:08,188 --> 00:03:13,193
announcement where the Visual Studio team, Visual Studio code team announced their extensibility model,

38
00:03:13,193 --> 00:03:18,198
and since then, we've had over 30,000 downloads of the extension and four updates with new features and a

39
00:03:18,198 --> 00:03:24,204
wide variety of great feedback in the community. So this effort also spawned another project called

40
00:03:24,204 --> 00:03:30,210
PowerShell Editor Services, which allows us to provide the same level of capability to pretty much any other

41
00:03:30,210 --> 00:03:34,214
editor, but we'll talk about that later. So,

42
00:03:34,214 --> 00:03:39,219
we also have Visual Studio and people were asking for a long time why Microsoft didn't actually provide

43
00:03:39,219 --> 00:03:41,221
PowerShell support directly in Visual Studio.

44
00:03:41,221 --> 00:03:47,227
Well they didn't really need to ask for long because Adam Driscoll came along and made poshtools in Visual Studio

45
00:03:47,227 --> 00:03:53,233
and it filled a real need for really good PowerShell support in Visual Studio as demonstrated by the 340,000

46
00:03:53,233 --> 00:03:59,239
downloads as received, at least for the 2015 version, and the utility of this extension was so obvious that

47
00:03:59,239 --> 00:04:05,245
the Visual Studio team decided to include it as part of the Windows, I'm sorry, as part of the Visual Studio 2015

48
00:04:05,245 --> 00:04:11,251
installer, so that was pretty cool. Now for those who need something a little different than what Microsoft

49
00:04:11,251 --> 00:04:18,258
provides are our third-party editor's store is still pretty good. There's the PowerShell studio editor from SAPIEN technologies.

50
00:04:18,258 --> 00:04:21,261
I think June's somewhere back here. It's a really nice tool

51
00:04:21,261 --> 00:04:27,267
that seems to go beyond just in general development experience to user interface development, packaging,

52
00:04:27,267 --> 00:04:32,272
and deployment and been hearing really good things about it on Twitter and I haven't really had much of a

53
00:04:32,272 --> 00:04:39,279
chance to play with it myself, but I'm sure that June would be happy to tell you more of the cool things it does.

54
00:04:39,279 --> 00:04:43,283
There's also PowerGUI, which was originally developed by a company called Quest and then

55
00:04:43,283 --> 00:04:48,288
acquired by Dell and I think that Kirk and Adam had worked on this at some point in the past.

56
00:04:48,288 --> 00:04:53,293
I've heard good things about it, but I don't really see much activity of risk development these days.

57
00:04:53,293 --> 00:04:59,299
And we also have the wild and crazy world of open-source code editors.

58
00:04:59,299 --> 00:05:04,304
So Sublime Text and Atom are both really popular for developers who primarily use open

59
00:05:04,304 --> 00:05:10,310
source technologies and platforms. Their strings lie in their modern style and white ecosystem of packages that

60
00:05:10,310 --> 00:05:14,314
give support for various different tools and technologies, pretty much anything that you can think of.

61
00:05:14,314 --> 00:05:20,320
So for PowerShell, both of these editors provide packages that contain syntax highlighting, snippets,

62
00:05:20,320 --> 00:05:26,326
and some really rudimentary IntelliSense, but no real integration with the PowerShell runtime.

63
00:05:26,326 --> 00:05:31,331
And last year, I spent a little bit of time, maybe a couple days trying to get PowerShell Editor Services

64
00:05:31,331 --> 00:05:36,336
integrated into Sublime Text to start to get some of these features online, but I still haven't got it fully

65
00:05:36,336 --> 00:05:41,341
wired up yet, but hopefully at some point later this year, I'll get a chance to go back to these editors and

66
00:05:41,341 --> 00:05:47,347
wire them up. However, over the last few months, I've noticed that a lot of people are starting to migrate

67
00:05:47,347 --> 00:05:54,354
towards Visual Studio code, so that may sort of affect the prioritization of the work to wire up these editors.

68
00:05:54,354 --> 00:05:59,359
So there's also Emacs and Vim and the common stereotype for Emacs and

69
00:05:59,359 --> 00:06:06,366
Vim users is that they're old school UNIX and MIMS with scruffy beards, long funny tails, and stale t-shirts,

70
00:06:06,366 --> 00:06:12,372
but the reality is that both of the editors are still widely-used today and there's a sort of resurgence in

71
00:06:12,372 --> 00:06:17,377
their popularity based on some new tools for them called Space Max and Neovim.

72
00:06:17,377 --> 00:06:22,382
Both of these editors have packages that provide basic PowerShell editing support, similarly to Sublime Text

73
00:06:22,382 --> 00:06:28,388
and Atom, but they also lack the richer editing features like IntelliSense, etc.

74
00:06:28,388 --> 00:06:35,395
And they also have the same sort of extensibility models that would allow those things to get added later.

75
00:06:35,395 --> 00:06:40,400
So since I'm actually a fan of Emacs, I want to go and try to get that thing hooked up with better PowerShell support

76
00:06:40,400 --> 00:06:44,404
sometime maybe later this year or next year. I know there's a couple of people on the PowerShell team that

77
00:06:44,404 --> 00:06:49,409
are active Vim users, so I wouldn't be surprised to see some activity there as well.

78
00:06:49,409 --> 00:06:54,414
So at this point, you're probably wondering why am I mentioning all of these editors.

79
00:06:54,414 --> 00:07:00,420
Well it shows that there's value in having different options for different needs, basically.

80
00:07:00,420 --> 00:07:06,426
So some people prefer the focus experience of PowerShell ISE, while others need a more complete development

81
00:07:06,426 --> 00:07:10,430
experience like Visual Studio, which supports other languages as well.

82
00:07:10,430 --> 00:07:18,438
Some people prefer the minimalistic editors like Vim or maybe modern highly-customizable editors like Atom.

83
00:07:18,438 --> 00:07:23,443
The important thing to understand is that for each of the editors provide a standard PowerShell development experience.

84
00:07:23,443 --> 00:07:30,450
They have to implement a fairly large amount of common code. So what we'd like to do is make it easier to

85
00:07:30,450 --> 00:07:34,454
provide the standard experience across most of these editors so that each developer can work in the environment

86
00:07:34,454 --> 00:07:38,458
that's most comfortable to them that works better for their workflow.

87
00:07:38,458 --> 00:07:42,5
So a little later in this talk I'll describe how we'll be able to accomplish such a standard experience and

88
00:07:42,5 --> 00:59:59,999
feature sets so that developers have a wide variety of tools to choose from.


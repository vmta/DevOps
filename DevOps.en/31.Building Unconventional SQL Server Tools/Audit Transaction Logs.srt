1
00:00:00,0 --> 00:00:03,294
Let's search the transaction logs for,

2
00:00:03,294 --> 00:00:13,294
I'm sure at your company that something came up missing in a database and you say who deleted that and all you

3
00:00:13,294 --> 00:00:22,294
hear is crickets. Well somebody deleted something or some process deleted something and that's one of the

4
00:00:22,294 --> 00:00:27,294
reasons you want to make sure you're using service accounts for everything because guess what, if you use

5
00:00:27,294 --> 00:00:33,294
your account and you set up some process and something comes up missing and you're actually innocent,

6
00:00:33,294 --> 00:00:39,294
you're going to be guilty based on the auditing.

7
00:00:39,294 --> 00:00:48,294
So this is actually the command I wrote. It's got all the same things I write in every command I ever use.

8
00:00:48,294 --> 00:00:54,294
It actually iterates through all the transaction log backups and the active transaction log.

9
00:00:54,294 --> 00:01:02,294
And I'm going to show you here real quick, this is some dynamic SQL that I'm writing and I'm writing it based on PowerShell.

10
00:01:02,294 --> 00:01:03,294
So what happens is when

11
00:01:03,294 --> 00:01:09,294
you query the transactions logs, you can break the transaction log up across 64 files.

12
00:01:09,294 --> 00:01:16,294
Well guess what, when you want to query it, there's a position for all 64 files and if there's only 1 file,

13
00:01:16,294 --> 00:01:24,294
you have to have the 1 file listed, you have to have default listed 63 times and if you have 5 files,

14
00:01:24,294 --> 00:01:30,294
then you've got to have default listed the number of times that it's necessary, but you can dynamically generate

15
00:01:30,294 --> 00:01:38,294
that SQL based on information on another table in SQL Server. So you'll generate your Transact SQL code that

16
00:01:38,294 --> 00:01:41,294
somebody would normally have to write manually.

17
00:01:41,294 --> 00:01:48,294
I want to show you a simple example and then we're going to see what code this generates in addition to the

18
00:01:48,294 --> 00:01:58,294
delete operation that occurred. So let's find out what happened to our database.

19
00:01:58,294 --> 00:02:09,294
So you can see there that a delete operation occurred on 3/28 at 3:19 PM and it also gives us the log

20
00:02:09,294 --> 00:02:17,294
sequence number we need to do the restore with to restore it just before the delete operation occurred.

21
00:02:17,294 --> 00:02:24,294
The reason we knew this, we had a report from somebody that a specific record in the database was missing.

22
00:02:24,294 --> 00:02:33,294
And you'll notice sure enough when we try to query that record, it's not in the database.

23
00:02:33,294 --> 00:02:39,294
So writing dynamic SQL code. So I have a function here, a static function.

24
00:02:39,294 --> 00:02:49,294
It's code that I showed earlier. It's very simple. So I'll get all the users with the last name of Browning.

25
00:02:49,294 --> 00:02:55,294
If I wanted to make, and this will show you in a very simple way what I'm doing.

26
00:02:55,294 --> 00:03:04,294
So all I've done is, we do this in PowerShell all the time, all I've done is parameterized the function,

27
00:03:04,294 --> 00:03:13,294
but I'm using the variable inside my SQL query because it's going to get translated before it's sent to the SQL Server.

28
00:03:13,294 --> 00:03:19,294
So if I want the last name of Browning, I can get that, but if I want the last name of Smith, I can get that as well.

29
00:03:19,294 --> 00:03:29,294
So that's the idea. And the other example is very complicated and kind of convoluted, so I wanted to make sure

30
00:03:29,294 --> 00:03:36,294
you knew what I was doing. So what we're going to do, I actually tweaked this code and this tweak doesn't

31
00:03:36,294 --> 00:03:48,294
exist on GitHub. There's a tweak in here that's it's actually going to do Write-Verbose and it's going to

32
00:03:48,294 --> 00:03:59,294
output the query itself in the verbose output. Make sure I get a clean Output window.

33
00:03:59,294 --> 00:04:07,294
So what we can do we can actually take this query here, yeah write that manually.

34
00:04:07,294 --> 00:04:18,294
Guess what, I could take this, it's not formatted very well, but it's not formatted that bad when it works.

35
00:04:18,294 --> 00:04:28,294
I just want to get it to a point where you can see all these defaults because it'll run like this.

36
00:04:28,294 --> 00:04:39,294
So that's the code we generated. So when I execute that, guess what, same information.

37
00:04:39,294 --> 00:04:47,294
And then, I'll show you an example. There's no deletes in this one, but it'll still generate the code.

38
00:04:47,294 --> 00:04:59,294
This one's a little bit messier because I've actually got four or five, I think five backup log files.

39
00:04:59,294 --> 00:05:10,294
Thank you. That tells me somebody's paying attention. (Working)

40
00:05:10,294 --> 00:05:20,294
See normally when I go to SQL Saturdays I have stuff to give away and I had stuff to give away, you would get something.

41
00:05:20,294 --> 00:05:24,294
I just don't want this to be formatted so bad. I want to be able to see any problems that I have.

42
00:05:24,294 --> 00:05:36,294
So that looks good. So you'll notice I've got more transaction log files and we actually have one more problem here.

43
00:05:36,294 --> 00:05:40,294
So when I execute that, it should execute without error, without return records and it does.

44
00:05:40,294 --> 00:59:59,999
So it dynamically creates this information.


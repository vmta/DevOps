1
00:00:12,12 --> 00:00:19,19
Okay, so today we're going to be talking about Building Unconventional SQL Server Tools in PowerShell.

2
00:00:19,19 --> 00:00:27,27
And I speak at a lot of SQL Saturday events so and I've actually been working with SQL Server longer than PowerShell

3
00:00:27,27 --> 00:00:33,33
and I've been using PowerShell since version 1.0, but I started with SQL Server in the 6.5 days.

4
00:00:33,33 --> 00:00:41,41
Also, notice at the bottom of this slide you can download my demo code if you want to follow along in the presentation.

5
00:00:41,41 --> 00:00:50,50
There's just a couple of minor tweaks I made to my code. I had somebody, an attendee in my last session

6
00:00:50,50 --> 00:00:56,56
recommend that because the code is not always so easy to see on the projector.

7
00:00:56,56 --> 00:01:02,62
Anyway, so I've been working with SQL Server 6.5 in the mid-90s and

8
00:01:02,62 --> 00:01:07,67
I guess they originally designed that product from Sybase and it was back in the crazy days when you could

9
00:01:07,67 --> 00:01:13,73
actually stick moldable databases in the same device, which meant you could take databases that had nothing

10
00:01:13,73 --> 00:01:19,79
to do with one another and stick them in the same physical file, which yeah, was insanity, not a good idea.

11
00:01:19,79 --> 00:01:26,86
So the product has gotten a lot better since then. I've done certification since 6.5.

12
00:01:26,86 --> 00:01:35,95
I did like the MCDBA on 7.0 2000 and MCITP on 2005. I can't remember if I did the 2008.

13
00:01:35,95 --> 00:01:42,102
I do more PowerShell nowadays, so I kind of figured that I'm not worried about SQL Server certifications.

14
00:01:42,102 --> 00:01:48,108
But I am the DBA for the company that I work for. I'm also the Exchange guy, the AD guy, the SAN guy,

15
00:01:48,108 --> 00:01:55,115
the firewall guy, you name it. I'm the only engineer. But today we're going to building some unconventional

16
00:01:55,115 --> 00:02:01,121
SQL Server tools in PowerShell and you'll see what I mean by that.

17
00:02:01,121 --> 00:02:05,125
We'll go through this slide, but I do have one question for the audience first.

18
00:02:05,125 --> 00:02:11,131
Who was in my session on Monday? Okay, I'll try not to repeat myself too much.

19
00:02:11,131 --> 00:02:16,136
If it's really important for the attendees that weren't there, I'll repeat myself.

20
00:02:16,136 --> 00:02:21,141
But if you didn't see that session, I would definitely recommend taking a look at it even if you're not

21
00:02:21,141 --> 00:02:26,146
working with DSC. It was DSC related, but there's some good tips in there if you're just building any kind

22
00:02:26,146 --> 00:02:29,149
of PowerShell tools.

23
00:02:29,149 --> 00:02:35,155
So my name is Mike F Robbins. I'm a Microsoft MVP on Windows PowerShell, SAPIEN Technologies MVP,

24
00:02:35,155 --> 00:02:43,163
leader and co-founder of the Mississippi PowerShell user group, co-author of Windows PowerShell TRM 4th edition.

25
00:02:43,163 --> 00:02:51,171
I wrote a chapter in the PowerShell Deep Dives book. I was winner of the advanced category in the 2013 Scripting Games.

26
00:02:51,171 --> 00:02:56,176
And if you want to learn more about me, just see my blog site.

27
00:02:56,176 --> 00:03:01,181
Okay, I've got some questions for the audience. How many IT pros do we have in the room?

28
00:03:01,181 --> 00:03:10,190
Okay, good. How many developers? And you may be both. Okay, what about DBAs?

29
00:03:10,190 --> 00:03:20,200
You may be like me. You're the reluctant DBA. Okay, and who's working with SQL Server today?

30
00:03:20,200 --> 00:03:27,207
Okay, good. I'm glad. The session is going to start out where it's not too advanced, but by the end of the

31
00:03:27,207 --> 00:03:35,215
session, it's going to be deep because I didn't want to start out by talking over anybody's head.

32
00:03:35,215 --> 00:03:44,224
Okay, so who's writing Transact SQL today? Okay. And who's working with the .NET Framework?

33
00:03:44,224 --> 00:03:51,231
Okay, and who's using some type of source control system for their PowerShell code?

34
00:03:51,231 --> 00:03:59,239
Okay. And who's using some sort of unit testing system such as Pester?

35
00:03:59,239 --> 00:04:07,247
Okay, and the source control and unit testing, that's something that you definitely want to learn more about.

36
00:04:07,247 --> 00:04:15,255
And who's using the PS Script Analyzer? Okay, that's something that you can use to test your code with for

37
00:04:15,255 --> 00:04:22,262
best practices and if you find that your code is just horrible based on the PS Script Analyzer,

38
00:04:22,262 --> 00:04:28,268
there's actually some reading material I've got for you on the resources slide because what you want to try

39
00:04:28,268 --> 00:04:35,275
to do is write your code so that you don't have a lot of problems with it and it's really a thought process

40
00:04:35,275 --> 00:04:44,284
and that's what my sessions this week have been about is I'm not going to give you a fish or a toolkit,

41
00:04:44,284 --> 00:04:49,289
but you're welcome to my toolkit because they're on GitHub. If you want to start with it, just support the

42
00:04:49,289 --> 00:04:54,294
repository and I do take pull request, but I want to teach you to fish.

43
00:04:54,294 --> 00:04:59,299
I want to teach you how to write your own toolkit. I want to teach you the mindset.

44
00:04:59,299 --> 00:05:06,306
So the information we're going to be covering is we'll talk about the SQL PowerShell module and snap-in.

45
00:05:06,306 --> 00:05:13,313
We'll talk about the SQL PowerShell provider, talk about SQL Management Objects, the .NET Framework,

46
00:05:13,313 --> 00:05:20,320
Transact SQL versus using cmdlets, functions, modules, toolmaking, automation, and we're going to use

47
00:05:20,320 --> 00:05:30,330
PowerShell to write some dynamic T-SQL code because why not use the tool instead of doing things manually,

48
00:05:30,330 --> 00:05:35,335
even writing your code manually, write PowerShell code. I've actually used PowerShell code to write

49
00:05:35,335 --> 00:05:37,337
PowerShell code for me.

50
00:05:37,337 --> 00:05:41,341
And I've got a good blog article on doing that with DSC configurations.

51
00:05:41,341 --> 00:05:49,349
And I presented for the Omaha PowerShell user group. That session is recorded and I demonstrated that as well.

52
00:05:49,349 --> 00:05:52,352
So how do I get the SQL PowerShell module?

53
00:05:52,352 --> 00:05:58,358
So this is from SQL 2014. It's installed as part of the management tools.

54
00:05:58,358 --> 00:06:05,365
Now in some previous versions, I was actually able to install just the SDK and get it that way, but I found

55
00:06:05,365 --> 00:06:11,371
in 2014, I actually do need the basic management tools to get the PowerShell functionality.

56
00:06:11,371 --> 00:06:17,377
Now that's going to change. On Friday, they actually

57
00:06:17,377 --> 00:06:24,384
released a preview version of SQL Management Studios, so it looks like what they're starting to do is break

58
00:06:24,384 --> 00:06:32,392
out the SQL Management Studio from the like install disk and the good thing about this, this is a preview

59
00:06:32,392 --> 00:06:40,400
build for March, the good thing about this, there's several things in the PowerShell SQL module that are fixed.

60
00:06:40,400 --> 00:06:47,407
It no longer changes your current location. It no longer uses unapproved verbs.

61
00:06:47,407 --> 00:06:54,414
It also loads much faster and I'm going to show you the code they're using today why it loads so slow.

62
00:06:54,414 --> 00:07:02,422
And the more modules you have on your machine with SQL 2014 or prior, the slower it loads because of the way

63
00:07:02,422 --> 00:59:59,999
they wrote their PowerShell commands.


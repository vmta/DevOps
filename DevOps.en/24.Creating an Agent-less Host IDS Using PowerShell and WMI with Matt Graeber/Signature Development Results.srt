1
00:00:00,0 --> 00:00:09,787
So once you've grown accustomed to like rooting out these like defensive signatures, here's some examples of

2
00:00:09,787 --> 00:00:15,787
what might be useful to defenders. So we just saw the first one here, although I'm going to filter it further.

3
00:00:15,787 --> 00:00:20,5
So this is what would detect that lateral movement that Jared was talking about.

4
00:00:20,5 --> 00:00:27,787
I'm interested in all method invocations of the Create method within the Win32_Process, so that'll give me

5
00:00:27,787 --> 00:00:36,787
the command-line context of what was executed via WMI, alright. Here if I was interested in any like remote

6
00:00:36,787 --> 00:00:46,787
WMI registry actions, this is what would trigger that. Now here I could do a Win32_ProcessStartTrace on

7
00:00:46,787 --> 00:00:54,787
powershell.exe, but as I was just saying to a gentleman up here, PowerShell is not powershell.exe.

8
00:00:54,787 --> 00:00:59,787
PowerShell could run in the context of any arbitrary process without it being powershell.exe.

9
00:00:59,787 --> 00:01:08,787
So this is the detection that, the signature that I came up with so anytime a module is loaded, so module being

10
00:01:08,787 --> 00:01:18,787
an exe, dll device driver, whose name contains system.management.automation.dll or .ni, which stands for

11
00:01:18,787 --> 00:01:26,787
native image, .dll, then let me know because maybe in our enterprise like we don't have admins running

12
00:01:26,787 --> 00:01:32,787
PowerShell everywhere so on those hosts where PowerShell should not be expected to run all the time,

13
00:01:32,787 --> 00:01:36,787
maybe I would want to be alerted upon that happening.

14
00:01:36,787 --> 00:01:42,787
Or if PowerShell is running an svchost.exe, then you probably definitely want to be notified about that.

15
00:01:42,787 --> 00:01:50,787
Yep. When I was talking about what HT29 was doing using WMI as a covert storage mechanism, they were creating

16
00:01:50,787 --> 00:01:55,787
their own custom classes. Here's a signature that you could use to detect that.

17
00:01:55,787 --> 00:01:57,5
Now

18
00:01:57,5 --> 00:02:02,787
you would eventually get some false positives say like you installed the latest service pack of Windows where

19
00:02:02,787 --> 00:02:08,5
there's going to be a lot of new WMI classes anyway, but hopefully, you'd be able to filter through those

20
00:02:08,5 --> 00:02:12,787
anyway because you're tracking when you're deploying updates.

21
00:02:12,787 --> 00:02:19,787
Lastly, this one's kind of interesting. If you were interested in maybe the attacker doing process

22
00:02:19,787 --> 00:02:26,787
enumeration using WMI, you would be able to detect that using this signature right here.

23
00:02:26,787 --> 00:02:27,787
So yes.

24
00:02:27,787 --> 00:02:32,787
Excuse me, on the left, I got them all, but on the last one, why is that important?

25
00:02:32,787 --> 00:02:41,787
So I wouldn't consider this last event to be super important, but say you're like thread intel has indicated that

26
00:02:41,787 --> 00:02:49,787
within your industry vertical, attackers really enjoy doing process enumeration using WMI, so this would be

27
00:02:49,787 --> 00:02:58,787
able to detect that action. So just by the nature of the attacker running say Get-WmiObject Win32_Process,

28
00:02:58,787 --> 00:03:04,787
this would trigger. Or if they use wmi.exe to do the same thing, it would also trigger, then you could be alerted.

29
00:03:04,787 --> 00:03:09,787
And so from like an auditing perspective, being able to know that somebody, what specifically somebody is

30
00:03:09,787 --> 00:03:15,787
using WMI for is very important. So like typically you'll see like wmiprvse.exe running when somebody's

31
00:03:15,787 --> 00:03:21,787
using WMI, but you won't actually know what class they're enumerating or what method they're calling.

32
00:03:21,787 --> 00:03:29,787
In this case, it would let you specifically determine what method or class is being utilized or enumerated.

33
00:03:29,787 --> 00:03:36,787
That would depend, the utility of that would depend on method that the attacker happened to use or use frequently.

34
00:03:36,787 --> 00:03:41,787
Sure, I mean you could make a very generic subscription and you would catch everything, but probably not

35
00:03:41,787 --> 00:03:42,787
necessarily what you want to do.

36
00:03:42,787 --> 00:03:48,787
Yeah, you don't want these signatures to be super loud. Again, you should filter as much as you possibly can.

37
00:03:48,787 --> 00:03:49,787
Oh, hold on let me set this to.

38
00:03:49,787 --> 00:03:56,787
So while Jared is setting up his portion of the demos, are there any questions that you have?

39
00:03:56,787 --> 00:03:58,787
What's the performance impact?

40
00:03:58,787 --> 00:04:07,787
So the comment was related to performance impact. So that's not something that we've like definitively

41
00:04:07,787 --> 00:04:15,787
quantified in our testing. All we have are like the qualitative results of the fact that, so Jared has

42
00:04:15,787 --> 00:04:19,787
deployed how many Uproot signatures in a large environment?

43
00:04:19,787 --> 00:04:25,787
Yeah so, that we have a client that is a Fortune 100 company that has 60,000 Windows endpoints domestically

44
00:04:25,787 --> 00:04:34,787
and we deployed Uproot to those, and so, and generally, we did some performance testing kind of like looking

45
00:04:34,787 --> 00:04:40,787
at the system that it was deployed to. Let's say we had 16 signatures deployed out and there was very

46
00:04:40,787 --> 00:04:48,288
minimal change from before to after, like literally we're talking like .1 MB of RAM being used and the processor

47
00:04:48,288 --> 00:04:54,5
doesn't even spike at all. And so, I don't know a like specific like we haven't done tons and tons

48
00:04:54,5 --> 00:04:59,5
of testing on performance, but from just like looking at it and kind of playing around with it, we haven't seen

49
00:04:59,5 --> 00:05:01,301
any performance with that.

50
00:05:01,301 --> 00:05:10,310
I can tell you one class to be extremely careful with is CIM_DataFile, so you will experience a performance

51
00:05:10,310 --> 00:59:59,999
hit with doing queries related to that, unless it's an extremely specific event filter that you're using.


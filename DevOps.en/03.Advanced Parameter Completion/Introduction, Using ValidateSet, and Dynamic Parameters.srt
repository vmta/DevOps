1
00:00:12,12 --> 00:00:16,5
Alright, so hey everybody. Welcome to the PowerShell Summit 2016.

2
00:00:16,5 --> 00:00:21,5
My name's Rohn Edwards. Today, I'm going to talk to you about advanced parameter completion, so how to get

3
00:00:21,5 --> 00:00:26,5
IntelliSense to help work for you for your commands, even for other people's commands, you know,

4
00:00:26,5 --> 00:00:30,5
commands that you didn't design, how you can add your own completion in.

5
00:00:30,5 --> 00:00:37,5
So I actually don't have any slides. I took the last one out this morning because I found they took too much

6
00:00:37,5 --> 00:00:41,5
time and they were pretty boring and I cover the same stuff in the demo code.

7
00:00:41,5 --> 00:00:50,5
So we're going to jump straight into it. But actually what I'm talking, obviously, I'm sure everybody knows,

8
00:00:50,5 --> 00:00:57,5
but you know, I have just a little demo command where Show-DateTimeCompleter and to be able to get that

9
00:00:57,5 --> 00:01:06,5
completion results to show up like that and to be able to dynamically change into really, really help add a

10
00:01:06,5 --> 00:01:09,5
little bit of polish to your commands.

11
00:01:09,5 --> 00:01:13,5
We're going to start, we're going to very, very briefly cover using ValidateSet to do this.

12
00:01:13,5 --> 00:01:21,5
I'm sure everybody's familiar with that. In the old days, years ago, PowerShell V3 came along and one of the

13
00:01:21,5 --> 00:01:28,5
nice things if a parameter had a ValidateSet attribute, you got tab completion in IntelliSense for free, kind of.

14
00:01:28,5 --> 00:01:32,5
So it wasn't really what ValidateSet was, it's not its main purpose to provide argument completion like that.

15
00:01:32,5 --> 00:01:37,5
It's really for data validation, but as a side effect of that, you got

16
00:01:37,5 --> 00:01:43,5
IntelliSense. So all of this code is going to be available after we're done, so you're going to notice

17
00:01:43,5 --> 00:01:49,5
there's a few regions and code that we just skip over, like I'm not even going to really cover doing a static ValidateSet.

18
00:01:49,5 --> 00:01:54,5
I'll show you that, but I'm sure everybody's familiar, that's in this room, with creating a static ValidateSet

19
00:01:54,5 --> 00:01:59,5
around a parameter. But if

20
00:01:59,5 --> 00:02:02,5
in the past, the problem with static ValidateSets are they are static.

21
00:02:02,5 --> 00:02:08,5
You have to know the values you're going to put into them at compile time, at your function or command

22
00:02:08,5 --> 00:02:13,5
definition time and that a lot of times doesn't work so well. A lot of times you need to know that information

23
00:02:13,5 --> 00:02:18,5
at runtime to provide dynamic ValidateSets to your users.

24
00:02:18,5 --> 00:02:24,5
So the way to do that, of course, is with dynamic parameters. And by the way, can everybody see that?

25
00:02:24,5 --> 00:02:32,5
Is that a good size? Alright. So we have just a real simple, this is what using dynamic parameters to create

26
00:02:32,5 --> 00:02:38,5
dynamic ValidateSets looks like. It looks like a lot of code. It looks kind of scary, but if you've done

27
00:02:38,5 --> 00:02:42,5
anything with dynamic parameters, you're going to recognize what's going on.

28
00:02:42,5 --> 00:02:45,5
You start out, so what we're going to do is create a function that has a single parameter.

29
00:02:45,5 --> 00:02:52,5
It's going to be called FolderName and it's just going to get the, it's going to list the folders at the root

30
00:02:52,5 --> 00:03:00,5
of the C drive. Right, so in the DynamicParam block, we do a directory listing of the C drive and we pull

31
00:03:00,5 --> 00:03:07,5
off just the folder names. And then a DynamicParam block in a function, its job is to return a dictionary

32
00:03:07,5 --> 00:03:15,5
of parameters that have been set. Nor a lot of times you depending on

33
00:03:15,5 --> 00:03:21,5
user provided values at the command-line, you may create a parameter that only makes sense in that, you know,

34
00:03:21,5 --> 00:03:29,5
for like Get-ChildItem, you can directory and file or dynamic switches that are added if you're in the file system.

35
00:03:29,5 --> 00:03:33,5
You get a code signing switch if you're in the certificate provider, stuff like that.

36
00:03:33,5 --> 00:03:40,5
So in this case, we're just going to create a parameter that is created at runtime every single time.

37
00:03:40,5 --> 00:03:45,5
Here's where we create the parameter dictionary that's going to be returned and here's where we actually

38
00:03:45,5 --> 00:03:50,5
return the dictionary at the very bottom and then in the middle is where we define that parameter.

39
00:03:50,5 --> 00:03:55,5
So before we define the parameter, we're going to have to tell it the attributes that we're going to add,

40
00:03:55,5 --> 00:03:59,5
so in this case, we are, we create a collection, and then we add to that collection.

41
00:03:59,5 --> 00:04:04,5
This is a little bit more verbose than it has to be, but I feel like this is a little more readable to

42
00:04:04,5 --> 00:04:11,5
understand what's going on, so we create a parameter attribute. This is the equivalent of having a bracket

43
00:04:11,5 --> 00:04:16,5
parameter, open and close parentheses, just an empty parameter attribute.

44
00:04:16,5 --> 00:04:20,5
And then we're going to create a ValidateSet, so this is the equivalent of, you know, if you had a static

45
00:04:20,5 --> 00:04:27,5
ValidateSet having the ValidateSet inside the brackets, and then in parenthesis, spelling out all the values.

46
00:04:27,5 --> 00:04:32,5
And here's where we create the parameter and add it to the dictionary.

47
00:04:32,5 --> 00:04:37,5
So and the only thing this function is going to do is just return the parameters that were passed to it.

48
00:04:37,5 --> 00:04:54,5
So if we come in here, oops, and don't overwrite the function, but instead Show-DynamicValidateSetExample-FolderName.

49
00:04:54,5 --> 00:05:00,5
So you can see this is the C drive is a little dirty. Actually, I have some random folders I created when I

50
00:05:00,5 --> 00:05:05,5
was going to try to cover a bug that used to be in ValidateSet, but you have to take my word for it.

51
00:05:05,5 --> 00:05:10,5
This was dynamically generated. If I went in and deleted a folder off the root of the C drive, this would change

52
00:05:10,5 --> 00:05:18,5
with it as well. And if you add version 3 or 4 or early, early versions of version 5, then this part right

53
00:05:18,5 --> 00:05:24,5
here might not have worked exactly as you anticipate. It wouldn't put quotes around anything in a ValidateSet

54
00:05:24,5 --> 00:05:30,5
with a space. I do have a work-a-round. I can't really demo it here because it is fixed in the current version

55
00:05:30,5 --> 00:05:36,5
of PowerShell, but what we're going to cover next uses the same type work around.

56
00:05:36,5 --> 00:59:59,999
So anyway, that's what it looks like to create a dynamic ValidateSet.

